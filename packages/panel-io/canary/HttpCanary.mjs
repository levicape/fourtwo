import { Canary, PromiseActivity } from "@levicape/paloma";
import { LoggingContext, RuntimeContext, } from "@levicape/paloma/runtime/server/RuntimeContext";
import { Effect } from "effect";
const { trace } = await Effect.runPromise(Effect.provide(Effect.gen(function* () {
    const logging = yield* LoggingContext;
    return {
        trace: (yield* logging.logger).withPrefix("canary").withContext({
            $event: "main",
        }),
    };
}), RuntimeContext));
export const healthcheck = new Canary("HttpCanary_healthcheck", {}, new PromiseActivity({
    events: {
        enter: async () => {
            const now = Date.now();
            trace
                .withMetadata({
                PromiseActivity: {
                    now,
                },
            })
                .info("enter");
            return {
                now,
            };
        },
        exit: async ({ events }) => {
            trace
                .withMetadata({
                PromiseActivity: {
                    now: events?.enter,
                },
            })
                .info("exit");
        },
    },
}, async ({ events }) => {
    trace.warn("Hello world");
    trace.metadataOnly([
        { a: 1, b: "Y" },
        { a: "Z", b: 2 },
    ]);
    fetch("https://jsonplaceholder.typicode.com/todos/1")
        .then((response) => response.json())
        .then((json) => {
        trace.withMetadata({ json }).info("Fetched");
    });
}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSHR0cENhbmFyeS5tanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJIdHRwQ2FuYXJ5Lm10cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzNELE9BQU8sRUFDTixjQUFjLEVBQ2QsY0FBYyxHQUNkLE1BQU0sZ0RBQWdELENBQUM7QUFDeEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUVoQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsTUFBTSxNQUFNLENBQUMsVUFBVSxDQUN4QyxNQUFNLENBQUMsT0FBTyxDQUNiLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDO0lBQ25CLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxDQUFDLGNBQWMsQ0FBQztJQUN0QyxPQUFPO1FBQ04sS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxXQUFXLENBQUM7WUFDL0QsTUFBTSxFQUFFLE1BQU07U0FDZCxDQUFDO0tBQ0YsQ0FBQztBQUNILENBQUMsQ0FBQyxFQUNGLGNBQWMsQ0FDZCxDQUNELENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsSUFBSSxNQUFNLENBQ3BDLHdCQUF3QixFQUN4QixFQUFFLEVBQ0YsSUFBSSxlQUFlLENBQ2xCO0lBQ0MsTUFBTSxFQUFFO1FBQ1AsS0FBSyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ2pCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUN2QixLQUFLO2lCQUNILFlBQVksQ0FBQztnQkFDYixlQUFlLEVBQUU7b0JBQ2hCLEdBQUc7aUJBQ0g7YUFDRCxDQUFDO2lCQUNELElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNoQixPQUFPO2dCQUNOLEdBQUc7YUFDSCxDQUFDO1FBQ0gsQ0FBQztRQUNELElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFO1lBQzFCLEtBQUs7aUJBQ0gsWUFBWSxDQUFDO2dCQUNiLGVBQWUsRUFBRTtvQkFDaEIsR0FBRyxFQUFFLE1BQU0sRUFBRSxLQUFLO2lCQUNsQjthQUNELENBQUM7aUJBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2hCLENBQUM7S0FDRDtDQUNELEVBQ0QsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRTtJQUNwQixLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzFCLEtBQUssQ0FBQyxZQUFZLENBQUM7UUFDbEIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUU7UUFDaEIsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7S0FDaEIsQ0FBQyxDQUFDO0lBQ0gsS0FBSyxDQUFDLDhDQUE4QyxDQUFDO1NBQ25ELElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ25DLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1FBQ2QsS0FBSyxDQUFDLFlBQVksQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzlDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUNELENBQ0QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENhbmFyeSwgUHJvbWlzZUFjdGl2aXR5IH0gZnJvbSBcIkBsZXZpY2FwZS9wYWxvbWFcIjtcbmltcG9ydCB7XG5cdExvZ2dpbmdDb250ZXh0LFxuXHRSdW50aW1lQ29udGV4dCxcbn0gZnJvbSBcIkBsZXZpY2FwZS9wYWxvbWEvcnVudGltZS9zZXJ2ZXIvUnVudGltZUNvbnRleHRcIjtcbmltcG9ydCB7IEVmZmVjdCB9IGZyb20gXCJlZmZlY3RcIjtcblxuY29uc3QgeyB0cmFjZSB9ID0gYXdhaXQgRWZmZWN0LnJ1blByb21pc2UoXG5cdEVmZmVjdC5wcm92aWRlKFxuXHRcdEVmZmVjdC5nZW4oZnVuY3Rpb24qICgpIHtcblx0XHRcdGNvbnN0IGxvZ2dpbmcgPSB5aWVsZCogTG9nZ2luZ0NvbnRleHQ7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR0cmFjZTogKHlpZWxkKiBsb2dnaW5nLmxvZ2dlcikud2l0aFByZWZpeChcImNhbmFyeVwiKS53aXRoQ29udGV4dCh7XG5cdFx0XHRcdFx0JGV2ZW50OiBcIm1haW5cIixcblx0XHRcdFx0fSksXG5cdFx0XHR9O1xuXHRcdH0pLFxuXHRcdFJ1bnRpbWVDb250ZXh0LFxuXHQpLFxuKTtcblxuZXhwb3J0IGNvbnN0IGhlYWx0aGNoZWNrID0gbmV3IENhbmFyeShcblx0XCJIdHRwQ2FuYXJ5X2hlYWx0aGNoZWNrXCIsXG5cdHt9LFxuXHRuZXcgUHJvbWlzZUFjdGl2aXR5KFxuXHRcdHtcblx0XHRcdGV2ZW50czoge1xuXHRcdFx0XHRlbnRlcjogYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG5cdFx0XHRcdFx0dHJhY2Vcblx0XHRcdFx0XHRcdC53aXRoTWV0YWRhdGEoe1xuXHRcdFx0XHRcdFx0XHRQcm9taXNlQWN0aXZpdHk6IHtcblx0XHRcdFx0XHRcdFx0XHRub3csXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdFx0LmluZm8oXCJlbnRlclwiKTtcblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0bm93LFxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGV4aXQ6IGFzeW5jICh7IGV2ZW50cyB9KSA9PiB7XG5cdFx0XHRcdFx0dHJhY2Vcblx0XHRcdFx0XHRcdC53aXRoTWV0YWRhdGEoe1xuXHRcdFx0XHRcdFx0XHRQcm9taXNlQWN0aXZpdHk6IHtcblx0XHRcdFx0XHRcdFx0XHRub3c6IGV2ZW50cz8uZW50ZXIsXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdFx0LmluZm8oXCJleGl0XCIpO1xuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHR9LFxuXHRcdGFzeW5jICh7IGV2ZW50cyB9KSA9PiB7XG5cdFx0XHR0cmFjZS53YXJuKFwiSGVsbG8gd29ybGRcIik7XG5cdFx0XHR0cmFjZS5tZXRhZGF0YU9ubHkoW1xuXHRcdFx0XHR7IGE6IDEsIGI6IFwiWVwiIH0sXG5cdFx0XHRcdHsgYTogXCJaXCIsIGI6IDIgfSxcblx0XHRcdF0pO1xuXHRcdFx0ZmV0Y2goXCJodHRwczovL2pzb25wbGFjZWhvbGRlci50eXBpY29kZS5jb20vdG9kb3MvMVwiKVxuXHRcdFx0XHQudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLmpzb24oKSlcblx0XHRcdFx0LnRoZW4oKGpzb24pID0+IHtcblx0XHRcdFx0XHR0cmFjZS53aXRoTWV0YWRhdGEoeyBqc29uIH0pLmluZm8oXCJGZXRjaGVkXCIpO1xuXHRcdFx0XHR9KTtcblx0XHR9LFxuXHQpLFxuKTsiXX0=